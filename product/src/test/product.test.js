const chai = require("chai");
const chaiHttp = require("chai-http");
const jwt = require("jsonwebtoken");
const mongoose = require("mongoose"); // C·∫ßn thi·∫øt ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i DB
const App = require("../app");
const Product = require("../models/product"); // C·∫ßn thi·∫øt cho vi·ªác d·ªçn d·∫πp
const expect = chai.expect;
require("dotenv").config();

chai.use(chaiHttp);

describe("Products", () => {
  let appInstance;
  let server; // L∆∞u tr·ªØ instance HTTP Server ƒëang ch·∫°y
  let authToken;

  before(async () => {
    appInstance = new App();
    
    // 1. CH·∫†Y TU·∫¶N T·ª∞: ƒê·∫£m b·∫£o DB ƒë∆∞·ª£c k·∫øt n·ªëi 
    await appInstance.connectDB(); 
    
    // 2. CH·ªú DB S·∫¥N S√ÄNG: S·ª≠ d·ª•ng Promise ƒë·ªÉ ch·ªù tr·∫°ng th√°i 'open' m·ªôt c√°ch an to√†n.
    // ƒêi·ªÅu n√†y kh·∫Øc ph·ª•c l·ªói "buffering timed out".
    if (mongoose.connection.readyState !== 1) { // 1 = Connected
        console.log("Waiting for Mongoose connection to open...");
        await new Promise(resolve => {
            // Ch·ªù s·ª± ki·ªán k·∫øt n·ªëi m·ªü (ch·ªâ ch·∫°y m·ªôt l·∫ßn)
            mongoose.connection.once('open', resolve); 
        });
        console.log("Mongoose connection ready.");
    }

    // [ƒê√É LO·∫†I B·ªé] L·ªánh g·ªçi appInstance.setupMessageBroker() ƒë√£ b·ªã x√≥a.
    // N·∫øu controller v·∫´n g·ªçi Broker, c·∫ßn ƒë·∫£m b·∫£o Broker tr·∫£ v·ªÅ k·∫øt qu·∫£ gi·∫£.
    
    // 3. D·ªçn d·∫πp d·ªØ li·ªáu c≈© (B√¢y gi·ªù ƒë√£ an to√†n ƒë·ªÉ ch·∫°y query DB)
    await Product.deleteMany({}); 

    // ‚öôÔ∏è Logic t·∫°o Token (CI/CD)
    if (!process.env.CI && !process.env.GITHUB_ACTIONS) {
      // Logic g·ªçi th·∫≠t Auth service... (Gi·ªØ nguy√™n)
      try {
        const authRes = await chai
          .request("http://localhost:3000")
          .post("/login")
          .send({
            username: process.env.LOGIN_TEST_USER,
            password: process.env.LOGIN_TEST_PASSWORD,
          });
        authToken = authRes.body.token;
      } catch (err) {
        console.error("‚ö†Ô∏è Auth service not available, using mock token");
      }
    } else {
      // üß™ CI/CD: t·∫°o token JWT gi·∫£ h·ª£p l·ªá
      console.log("üß™ Running in CI/CD ‚Üí generating mock JWT");
      authToken = jwt.sign(
        { username: "ci_user", role: "tester" },
        process.env.JWT_SECRET || "your_jwt_secret_here",
        { expiresIn: "1h" }
      );
    }
    
    // 4. Kh·ªüi ƒë·ªông server v√† ch·ªù n√≥ l·∫Øng nghe
    server = appInstance.start(); 
    await new Promise(resolve => server.on('listening', resolve));
  });

  after(async () => {
    // 1. D·ªçn d·∫πp d·ªØ li·ªáu sau khi ho√†n t·∫•t test suite
    if (mongoose.connection.readyState === 1) {
        await Product.deleteMany({}); 
    }
    
    // 2. ƒê√≥ng server an to√†n (kh·∫Øc ph·ª•c l·ªói Timeout)
    if (server) {
      await new Promise(resolve => server.close(resolve));
    }
    
    // 3. Ng·∫Øt k·∫øt n·ªëi DB
    await appInstance.disconnectDB();
  });

  describe("POST /api/products", () => {
    it("should create a new product", async () => {
      const product = {
        name: "Product 1",
        description: "Description of Product 1",
        price: 10,
      };

      const res = await chai
        .request(server) // S·ª¨ D·ª§NG SERVER INSTANCE ƒêANG CH·∫†Y
        .post("/")
        .set("Authorization", `Bearer ${authToken}`)
        .send(product);

      expect(res).to.have.status(201);
      expect(res.body).to.have.property("_id");
      expect(res.body).to.have.property("name", product.name);
      expect(res.body).to.have.property("description", product.description);
      expect(res.body).to.have.property("price", product.price);
    });

    it("should return an error if name is missing", async () => {
      const product = {
        description: "Description of Product 1",
        price: 10.99,
      };

      const res = await chai
        .request(server) // S·ª¨ D·ª§NG SERVER INSTANCE ƒêANG CH·∫†Y
        .post("/")
        .set("Authorization", `Bearer ${authToken}`)
        .send(product);

      expect(res).to.have.status(400);
    });
  });
});
